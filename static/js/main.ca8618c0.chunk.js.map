{"version":3,"sources":["util/auth.js","AppContainer/User/User.js","GistListContainer/Gist/Gist.js","GistStore.js","GistListContainer/GistListContainer.js","AppContainer/App/Sidenav.js","AppContainer/App/App.js","EditorContainer/Editor/Editor.js","EditorContainer/EditorContainer.js","AppContainer/AppContainer.js","serviceWorker.js","index.js"],"names":["AuthContext","React","createContext","GITHUB_USER","getUser","a","githubUserStr","localStorage","getItem","JSON","parse","code","window","location","href","match","fetch","response","json","token","access_token","headers","Authorization","response2","status","Error","Object","user","assign","setItem","stringify","User","memo","useContext","Image","src","avatar_url","style","height","Anchor","label","icon","Github","Gist","gist","selectGist","Box","pad","key","id","Text","description","keys","files","values","filter","file","language","map","index","Button","margin","filename","hoverIndicator","onClick","useGistStore","initialState","useState","gists","setGists","updateGists","GistListContainer","useStore","useEffect","fetchGists","g","length","some","f","Sidenav","SidenavContents","MainContents","headerHeight","showLeftNav","setShowLeftNav","containerClass","css","asideClass","mainClass","separatorClass","className","elevation","Elevation","TWO","content","position","Position","RIGHT","minimal","App","Main","align","Alignment","Editor","props","iframe","undefined","state","run","bind","updateCode","ev","this","setState","contentWindow","eval","nextProps","nextContext","externalContent","mode","theme","onChange","name","value","focus","editorProps","$blockScrolling","width","commands","bindKey","win","mac","exec","primary","Run","title","display","ref","r","Component","EditorContainer","selectedGist","setContent","fetchGistContent","FocusStyleManager","onlyShowFocusOnTabs","AppContainer","setUser","fetchLoggedInUser","Provider","stores","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAEaA,EAAcC,IAAMC,cAAc,MAElCC,EAAc,cAEpB,SAAeC,IAAtB,+B,4CAAO,wCAAAC,EAAA,2DACCC,EAAgBC,aAAaC,QAAQL,IADtC,yCAGIM,KAAKC,MAAMJ,IAHf,UAKGK,EACJC,OAAOC,SAASC,KAAKC,MAAM,gBAC3BH,OAAOC,SAASC,KAAKC,MAAM,eAAe,GAPzC,yCAUM,MAVN,iCAasBC,MACrB,mFACEL,GAfH,eAaKM,EAbL,iBAiBqCA,EAASC,OAjB9C,wBAiBqBC,EAjBrB,EAiBOC,aAjBP,UAkBuBJ,MAAM,8BAA+B,CAC3DK,QAAS,CAAEC,cAAc,SAAD,OAAWH,MAnBpC,cAkBKI,EAlBL,QAqBaC,OAAS,KArBtB,uBAsBO,IAAIC,MAAM,gBAtBjB,oBAwBYC,OAxBZ,UAwBgCH,EAAUL,OAxB1C,gCAwBkD,CAAEC,SAA/CQ,EAxBL,KAwBmBC,OAxBnB,qBAyBDrB,aAAasB,QAAQ1B,EAAaM,KAAKqB,UAAUJ,OAAOE,OAAOD,KAzB9D,kBA2BMA,GA3BN,2DA6BM,MA7BN,2D,sBCDP,IAKaI,EAAO9B,IAAM+B,MAAK,WAC7B,IAAML,EAAOM,qBAAWjC,GACxB,OAAO2B,EACL,kBAACO,EAAA,EAAD,CAAOC,IAAKR,EAAKS,WAAYC,MAAO,CAAEC,OAAQ,UAE9C,kBAACC,EAAA,EAAD,CAAQzB,KATV,oHASqB0B,MAAO,UAAWC,KAAM,kBAACC,EAAA,EAAD,W,2BCZlCC,EAAO1C,IAAM+B,MAAK,YAAqC,IAArBY,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WACnD,OACE,kBAACC,EAAA,EAAD,CAAKC,IAAI,QAAQC,IAAKJ,EAAKK,IACzB,kBAACC,EAAA,EAAD,KAAON,EAAKO,aAAezB,OAAO0B,KAAKR,EAAKS,OAAO,IAElD3B,OAAO4B,OAAOV,EAAKS,OACjBE,QAAO,SAAAC,GAAI,MAAsB,eAAlBA,EAAKC,YACpBC,KAAI,SAAAF,GAAI,OAAI9B,OAAOE,OAAO,GAAI4B,EAAM,CAAEP,GAAIL,EAAKK,QAC/CS,KAAI,SAACF,EAAMG,GAAP,OACH,kBAACC,EAAA,EAAD,CACEC,OAAO,QACPb,IAAKQ,EAAKM,SAAWH,EACrBI,gBAAc,EACdC,QAAS,kBAAMnB,EAAWW,KAE1B,kBAACN,EAAA,EAAD,KAAOM,EAAKM,kBChBjB,SAASG,IAAmC,IAAtBC,EAAqB,uDAAN,KAAM,EACxBC,mBAASD,GADe,mBAC3CE,EAD2C,KACpCC,EADoC,KAGhD,MAAO,CAAED,QAAOE,YADE,SAAAF,GAAK,OAAIC,EAASD,K,YCEzBG,EAAoBtE,IAAM+B,MAAK,WAA6B,IAE/Db,GAAUc,qBAAWjC,IAAgB,IAArCmB,MAF+D,EAGxCqD,mBAASP,GAAhCG,EAH+D,EAG/DA,MAAOE,EAHwD,EAGxDA,YAoBf,OAlBAG,qBAAU,WAAM,4CAId,4BAAApE,EAAA,+EAE2BW,MAAM,+BAAgC,CAC3DK,QAAS,CAAEC,cAAc,SAAD,OAAWH,MAHzC,UAEUF,EAFV,YAKIqD,IAAYrD,EAASO,OAAS,KALlC,qBAKwC,GALxC,wCAKmDP,EAASC,OAL5D,uGAOIoD,EAAY,IAPhB,2DAJc,sBACTnD,IAASiD,GADA,mCAedM,KACC,CAACvD,EAAOiD,EAAOE,IAGhBF,GACAA,EACGb,QACC,SAAAoB,GAAC,OACCjD,OAAO0B,KAAKuB,EAAEtB,OAAOuB,OAAS,GAC9BlD,OAAO4B,OAAOqB,EAAEtB,OAAOwB,MAAK,SAAAC,GAAC,MAAmB,eAAfA,EAAErB,eAEtCC,KAAI,SAAAd,GAAI,OAAI,kBAAC,EAAD,CAAMI,IAAKJ,EAAKK,GAAIL,KAAMA,EAAMC,WAAY,qB,2/BC/BxD,IAAMkC,EAAU9E,IAAM+B,MAAK,YAI9B,IAHFgD,EAGC,EAHDA,gBACAC,EAEC,EAFDA,aACAC,EACC,EADDA,aAEQ/D,GAAUc,qBAAWjC,IAAgB,IAArCmB,MADP,EAEqCgD,oBAAS,GAF9C,mBAEMgB,EAFN,KAEmBC,EAFnB,KAGKC,EAAiBC,YAAH,IAIKJ,EAChBA,GAIHK,EAAaD,YAAH,IACLnE,GAASgE,EAAc,IAAM,GAE3BA,EAAc,GAAK,GAG1BK,EAAYF,YAAH,KAKTG,EAAiBH,YAAH,IAEVnE,GAASgE,EAAc,IAAM,EAEjBA,EAAc,EAAI,KAKxC,OACE,yBAAKO,UAAWL,GACd,kBAAC,IAAD,CAAMM,UAAWC,IAAUC,IAAKH,UAAWH,GACzC,yBACEG,UAAWJ,YAAF,IAGEH,IAGVA,GAAe,kBAACH,EAAD,QAGpB,0BAAMU,UAAWF,GACf,kBAACP,EAAD,OAEF,yBAAKS,UAAWD,GACd,kBAAC,IAAD,CACEK,QAASX,EAAc,eAAiB,eACxCY,SAAUC,IAASC,OAEnB,kBAAC,IAAD,CACEjC,QAAS,kBAAMoB,GAAgBD,IAC/B1C,KAAM,aACNyD,SAAS,UCvDRC,EAAMlG,IAAM+B,MAAK,YAA+C,IAAhCgD,EAA+B,EAA/BA,gBAAiBoB,EAAc,EAAdA,KAAMrE,EAAQ,EAARA,KAGlE,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,gBAGJ,kBAAC,IAAD,CAAasE,MAAOC,IAAUL,OAC5B,kBAAClE,EAAD,QAGJ,kBAAC,EAAD,CACEmD,aAAc,GACdF,gBAAiBA,EACjBC,aAAcmB,Q,6FCjBTG,GAAb,YACE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,YAASC,EACd,EAAKC,MAAQ,CACXb,QAAQ,uEAGV,EAAKc,IAAM,EAAKA,IAAIC,KAAT,gBACX,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBARD,EADrB,wEAWaE,GACTC,KAAKC,SAAS,CAAEnB,QAASiB,MAZ7B,4BAeuBC,KAAKP,OAAOS,cACpBC,KAAKH,KAAKL,MAAMb,WAhB/B,mFAmB4BsB,EAAWC,GAnBvC,wEAoBUC,EAAkBF,EAAUE,kBAEXA,IAAoBN,KAAKL,MAAMb,SACpDkB,KAAKC,SAAS,CAAEnB,QAASwB,IAvB/B,wIA2BY,IAAD,OACP,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,CACEC,KAAK,aACLC,MAAM,SACNC,SAAUT,KAAKF,WACfY,KAAK,YACLC,MAAOX,KAAKL,MAAMb,QAClB8B,OAAO,EACPC,YAAa,CAAEC,iBAAiB,GAChCC,MAAO,OACPC,SAAU,CACR,CAEEN,KAAM,UACNO,QAAS,CAAEC,IAAK,aAAcC,IAAK,iBACnCC,KAAMpB,KAAKJ,QAIjB,kBAAChD,EAAA,EAAD,CAAQI,QAASgD,KAAKJ,IAAKyB,SAAO,EAAC5F,KAAM,kBAAC6F,EAAA,EAAD,MAAS9F,MAAO,QACzD,4BACE+F,MAAO,QACPlG,MAAO,CAAEmG,QAAS,QAClBC,IAAK,SAAAC,GAAC,OAAK,EAAKjC,OAASiC,IAExB,UAtDX,GAA4BC,aCRfC,GAAkB3I,IAAM+B,MAAK,YAEtC,IADF6G,EACC,EADDA,aAEQ1H,GAAUc,qBAAWjC,IAAgB,IAArCmB,MADP,EAE+BgD,mBAAS,MAFxC,mBAEO2B,EAFP,KAEgBgD,EAFhB,KAyBD,OAtBArE,qBAAU,WAAM,4CACd,gCAAApE,EAAA,2DACMwI,GAAgBA,EAAa5F,IAAM9B,GADzC,0CAG6BH,MACrB,gCAAkC6H,EAAa5F,GAC/C,CACE5B,QAAS,CAAEC,cAAc,SAAD,OAAWH,MAN7C,aAGYF,EAHZ,QASmBO,OAAS,KAT5B,sBAUc,IAAIC,MAAM,gBAVxB,uBAYyBR,EAASC,OAZlC,OAYY0B,EAZZ,OAaYY,EAAOZ,EAAKS,MAAMwF,EAAa/E,UACrCgF,EAAWtF,EAAKsC,SAdtB,6GADc,uBAAC,WAAD,wBAoBdiD,KACC,CAACF,EAAc1H,IACX,kBAAC,GAAD,CAAQmG,gBAAiBxB,O,OCpBlCkD,EAAkBC,sBAEX,IAAMC,GAAejJ,IAAM+B,MAAK,WAAwB,MAErCmC,mBAAS,MAF4B,mBAEtDxC,EAFsD,KAEhDwH,EAFgD,KAU7D,OAPA1E,qBAAU,WAAM,4CACd,sBAAApE,EAAA,kEACE8I,EADF,SACgB/I,IADhB,8EADc,uBAAC,WAAD,wBAKdgJ,KACC,IAED,kBAACpJ,EAAYqJ,SAAb,CAAsB1B,MAAOhG,GAC3B,kBAAC,WAAD,CAAU2H,OAAQ,CAACrF,IACjB,kBAAC,EAAD,CACEe,gBAAiBT,EACjB6B,KAAMwC,GACN7G,KAAMA,SCjBIwH,QACW,cAA7B3I,OAAOC,SAAS2I,UAEe,UAA7B5I,OAAOC,SAAS2I,UAEhB5I,OAAOC,SAAS2I,SAASzI,MACvB,2DCZN0I,IAASC,OAAO,kBAAC,GAAD,MAAkBC,SAASC,eAAe,SD2HpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ca8618c0.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const AuthContext = React.createContext(null);\n\nexport const GITHUB_USER = \"github-user\";\n\nexport async function getUser() {\n  const githubUserStr = localStorage.getItem(GITHUB_USER);\n  if (githubUserStr) {\n    return JSON.parse(githubUserStr);\n  } else {\n    const code =\n      window.location.href.match(/\\?code=(.*)/) &&\n      window.location.href.match(/\\?code=(.*)/)[1];\n\n    if (!code) {\n      return null;\n    }\n    try {\n      const response = await fetch(\n        \"https://pqsq24y7vb.execute-api.us-east-1.amazonaws.com/github/authenticate?code=\" +\n          code\n      );\n      const { access_token: token } = await response.json();\n      const response2 = await fetch(\"https://api.github.com/user\", {\n        headers: { Authorization: `token ${token}` }\n      });\n      if (response2.status > 400) {\n        throw new Error(\"Unauthorized\");\n      }\n      const user = Object.assign(await response2.json(), { token });\n      localStorage.setItem(GITHUB_USER, JSON.stringify(Object.assign(user)));\n\n      return user;\n    } catch (e) {\n      return null;\n    }\n  }\n}\n","import React, { useContext } from \"react\";\nimport { Anchor, Image } from \"grommet\";\nimport { Github } from \"grommet-icons\";\nimport { AuthContext } from \"util/auth\";\n\nconst URL =\n  \"https://github.com/login/oauth/authorize?client_id=5baaa09a82442f96fb0d&\" +\n  \"scope=gist&\" +\n  \"redirect_uri=https://jsrun.dev\";\n\nexport const User = React.memo(function User() {\n  const user = useContext(AuthContext);\n  return user ? (\n    <Image src={user.avatar_url} style={{ height: \"40px\" }} />\n  ) : (\n    <Anchor href={URL} label={\"Log in \"} icon={<Github />} />\n  );\n});\n","import React from \"react\";\nimport { Box, Button, Text } from \"grommet/es6\";\n\nexport const Gist = React.memo(function Gist({ gist, selectGist }) {\n  return (\n    <Box pad=\"small\" key={gist.id}>\n      <Text>{gist.description || Object.keys(gist.files)[0]}</Text>\n\n      {Object.values(gist.files)\n        .filter(file => file.language === \"JavaScript\")\n        .map(file => Object.assign({}, file, { id: gist.id }))\n        .map((file, index) => (\n          <Button\n            margin=\"small\"\n            key={file.filename + index}\n            hoverIndicator\n            onClick={() => selectGist(file)}\n          >\n            <Text>{file.filename}</Text>\n          </Button>\n        ))}\n    </Box>\n  );\n});\n","import { useState } from 'react';\n\nexport function useGistStore(initialState = null) {\n  let [gists, setGists] = useState(initialState);\n  let updateGists = gists => setGists(gists);\n  return { gists, updateGists };\n}\n\n","import React, { useContext, useEffect } from 'react';\nimport { AuthContext } from 'util/auth';\nimport { Gist } from './Gist';\nimport { useGistStore } from '../GistStore';\nimport { useStore } from 'outstated';\n\nexport const GistListContainer = React.memo(function GistListContainer() {\n  // const [gists, setGists] = useState([]);\n  const { token } = useContext(AuthContext) || {};\n  const { gists, updateGists } = useStore(useGistStore);\n  // updateGists(res);\n  useEffect(() => {\n    if (!token || gists) {\n      return;\n    }\n    async function fetchGists() {\n      try {\n        const response = await fetch('https://api.github.com/gists', {\n          headers: { Authorization: `token ${token}` }\n        });\n        updateGists(response.status > 400 ? [] : await response.json());\n      } catch (e) {\n        updateGists([]);\n      }\n    }\n    // noinspection JSIgnoredPromiseFromCall\n    fetchGists();\n  }, [token, gists, updateGists]);\n\n  return (\n    gists &&\n    gists\n      .filter(\n        g =>\n          Object.keys(g.files).length > 0 &&\n          Object.values(g.files).some(f => f.language === 'JavaScript')\n      )\n      .map(gist => <Gist key={gist.id} gist={gist} selectGist={() => {}} />)\n  );\n});\n","import React, { useContext, useState } from 'react';\nimport './App.css';\nimport { css } from 'emotion';\nimport { Button, Card, Elevation, Position, Tooltip } from '@blueprintjs/core';\nimport { AuthContext } from '../../util/auth';\n\nexport const Sidenav = React.memo(function Sidenav({\n  SidenavContents,\n  MainContents,\n  headerHeight\n}) {\n  const { token } = useContext(AuthContext) || {};\n  const [showLeftNav, setShowLeftNav] = useState(true);\n  const containerClass = css`\n    display: flex;\n    align-items: stretch;\n    overflow: hidden;\n    height: calc(100vh - ${headerHeight}px);\n    top: ${headerHeight}px;\n    width: 100%;\n  `;\n\n  const asideClass = css`\n    width: ${token && showLeftNav ? 250 : 16}px;\n    overflow: auto;\n    padding: ${showLeftNav ? 20 : 0}px;\n    position: relative;\n  `;\n  const mainClass = css`\n    flex-grow: 2;\n    overflow: auto;\n    z-index: -10;\n  `;\n  const separatorClass = css`\n    position: absolute;\n    left: ${token && showLeftNav ? 233 : 4}px;\n    top: 48vh;\n    transform: rotate(${showLeftNav ? 0 : 180}deg);\n    & button:hover {\n      background: none !important;\n    }\n  `;\n  return (\n    <div className={containerClass}>\n      <Card elevation={Elevation.TWO} className={asideClass}>\n        <div\n          className={css`\n            width: 200px;\n            position: absolute;\n            right: ${showLeftNav} ? 0 : 40}px;\n          `}\n        >\n          {showLeftNav && <SidenavContents />}\n        </div>\n      </Card>\n      <main className={mainClass}>\n        <MainContents />\n      </main>\n      <div className={separatorClass}>\n        <Tooltip\n          content={showLeftNav ? 'Hide (Cmd+[)' : 'Show (Cmd+[)'}\n          position={Position.RIGHT}\n        >\n          <Button\n            onClick={() => setShowLeftNav(!showLeftNav)}\n            icon={'one-column'}\n            minimal={true}\n          />\n        </Tooltip>\n      </div>\n    </div>\n  );\n});\n","import React, { Fragment } from 'react';\nimport './App.css';\nimport {\n  Alignment,\n  H3,\n  Navbar,\n  NavbarGroup,\n  NavbarHeading\n} from '@blueprintjs/core';\nimport { Sidenav } from './Sidenav';\n\nexport const App = React.memo(function App({ SidenavContents, Main, User }) {\n  // const { token } = useContext(AuthContext) || {};\n\n  return (\n    <Fragment>\n      <Navbar>\n        <NavbarGroup>\n          <NavbarHeading>\n            <H3>JSrun</H3>\n          </NavbarHeading>\n        </NavbarGroup>\n        <NavbarGroup align={Alignment.RIGHT}>\n          <User />\n        </NavbarGroup>\n      </Navbar>\n      <Sidenav\n        headerHeight={50}\n        SidenavContents={SidenavContents}\n        MainContents={Main}\n      />\n    </Fragment>\n  );\n});\n","import React, { Component, Fragment } from \"react\";\nimport AceEditor from \"react-ace\";\n\nimport \"brace/mode/javascript\";\nimport \"brace/theme/github\";\nimport { Button } from \"grommet\";\nimport { Run } from \"grommet-icons\";\n\n/**\n * TODO: Replace this with functional component commented below. With the current commented code there is an issue when\n * cmd+Enter is run after updating the content\n */\nexport class Editor extends Component {\n  constructor(props) {\n    super(props);\n    this.iframe = undefined;\n    this.state = {\n      content: `// Open dev tools to see the output\t\n console.log('Hello World');`\n    };\n    this.run = this.run.bind(this);\n    this.updateCode = this.updateCode.bind(this);\n  }\n  updateCode(ev) {\n    this.setState({ content: ev });\n  }\n  run() {\n    const contentDoc = this.iframe.contentWindow;\n    contentDoc.eval(this.state.content);\n  }\n\n  async componentWillUpdate(nextProps, nextContext) {\n    const externalContent = nextProps.externalContent;\n    // const selectedGist = nextProps.selectedGist;\n    if (externalContent && externalContent !== this.state.content) {\n      this.setState({ content: externalContent });\n    }\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <AceEditor\n          mode=\"javascript\"\n          theme=\"github\"\n          onChange={this.updateCode}\n          name=\"js-editor\"\n          value={this.state.content}\n          focus={true}\n          editorProps={{ $blockScrolling: true }}\n          width={\"100%\"}\n          commands={[\n            {\n              // commands is array of key bindings.\n              name: \"Execute\", //name for the key binding.\n              bindKey: { win: \"Ctrl-Enter\", mac: \"Command-Enter\" }, //key combination used for the command.\n              exec: this.run //function to execute when keys are pressed.\n            }\n          ]}\n        />\n        <Button onClick={this.run} primary icon={<Run />} label={\"Run\"} />\n        <iframe\n          title={\"dummy\"}\n          style={{ display: \"none\" }}\n          ref={r => (this.iframe = r)}\n        >\n          {\" \"}\n        </iframe>\n      </Fragment>\n    );\n  }\n}\n//\n// export const Editor = React.memo(function Editor({ externalContent }) {\n//   const [content, setContent] = useState(\n//     `// Open dev tools to see the output\n// console.log('Hello World');`\n//   );\n//   const [iframe, setIframe] = useState(null);\n//   useEffect(() => {\n//     if (externalContent) {\n//       setContent(externalContent);\n//     }\n//   }, [externalContent]);\n//   const run = () => {\n//     const contentDoc = iframe.contentWindow;\n//     contentDoc.eval(content);\n//   };\n//   return (\n//     <div>\n//       <iframe\n//         title={\"dummy\"}\n//         style={{ display: \"none\" }}\n//         ref={r => setIframe(r)}\n//       >\n//         {\" \"}\n//       </iframe>\n//       {iframe && (\n//         <AceEditor\n//           mode=\"javascript\"\n//           theme=\"tomorrow\"\n//           onChange={content => setContent(content)}\n//           name=\"js-editor\"\n//           value={content}\n//           focus={true}\n//           editorProps={{ $blockScrolling: true }}\n//           width={\"100%\"}\n//           commands={[\n//             {\n//               // commands is array of key bindings.\n//               name: \"Execute\", //name for the key binding.\n//               bindKey: { win: \"Ctrl-Enter\", mac: \"Command-Enter\" }, //key combination used for the command.\n//               exec: () => run() //function to execute when keys are pressed.\n//             }\n//           ]}\n//         />\n//       )}\n//       <Button onClick={() => run()} primary icon={<Run />} label={\"Run\"} />\n//     </div>\n//   );\n// });\n//\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { AuthContext } from \"../util/auth\";\nimport { Editor } from \"./Editor\";\n\nexport const EditorContainer = React.memo(function EditorContainer({\n  selectedGist\n}) {\n  const { token } = useContext(AuthContext) || {};\n  const [ content, setContent ] = useState(null);\n  useEffect(() => {\n    async function fetchGistContent() {\n      if (selectedGist && selectedGist.id && token) {\n        try {\n          const response = await fetch(\n            \"https://api.github.com/gists/\" + selectedGist.id,\n            {\n              headers: { Authorization: `token ${token}` }\n            }\n          );\n          if (response.status > 400) {\n            throw new Error(\"Unauthorized\");\n          }\n          const gist = await response.json();\n          const file = gist.files[selectedGist.filename];\n          setContent(file.content);\n        } catch (e) {}\n      }\n    }\n    // noinspection JSIgnoredPromiseFromCall\n    fetchGistContent();\n  }, [selectedGist, token]);\n  return <Editor externalContent={content} />;\n});\n","import React, { useEffect, useState } from 'react';\nimport { User } from './User';\nimport { GistListContainer } from '../GistListContainer';\nimport { AuthContext, getUser } from '../util/auth';\nimport { App } from './App';\nimport { EditorContainer } from '../EditorContainer';\n\nimport { useGistStore } from '../GistStore';\nimport { FocusStyleManager } from '@blueprintjs/core';\nimport { Provider } from 'outstated';\n\nFocusStyleManager.onlyShowFocusOnTabs();\n\nexport const AppContainer = React.memo(function AppContainer() {\n  // const [selectedGist, setSelectedGist] = useState({});\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    async function fetchLoggedInUser() {\n      setUser(await getUser());\n    }\n    // noinspection JSIgnoredPromiseFromCall\n    fetchLoggedInUser();\n  }, []);\n  return (\n    <AuthContext.Provider value={user}>\n      <Provider stores={[useGistStore]}>\n        <App\n          SidenavContents={GistListContainer}\n          Main={EditorContainer}\n          User={User}\n        />\n      </Provider>\n    </AuthContext.Provider>\n  );\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { AppContainer } from \"./AppContainer\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<AppContainer />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}